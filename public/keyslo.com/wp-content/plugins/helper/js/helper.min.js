/*! License information can be found in helper.js.LICENSE.txt */
(() => {
    "use strict";

    function e(e) {
        const {
            avatar: t
        } = window.mdpHelper;
        if (e) {
            if ("none" === t.user.type) return;
            const e = document.createElement("div");
            return e.classList.add("mdp-helper-visitor-avatar", "mdp-helper-avatar"), e.innerHTML = "" !== t.user.content ? t.user.content : t.user.url ? `<img src="${t.user.url}" alt="${t.user.alt}">` : "", e
        } {
            if ("none" === t.bot.type) return;
            const e = document.createElement("div");
            return e.classList.add("mdp-helper-bot-avatar", "mdp-helper-avatar"), e.innerHTML = "" !== t.bot.content ? t.bot.content : t.bot.url ? `<img src="${t.bot.url}" alt="${t.bot.alt}">` : "", e
        }
    }

    function t(e, t = "") {
        const n = document.createElement("button");
        return n.classList.add("mdp-bot-menu-button"), n.setAttribute("data-button-type", e), n.title = t, n.innerHTML = t, n
    }

    function n(e) {
        const {
            botRespondDelay: t,
            botTypingAnimation: n,
            botTypingAnimationDelay: a,
            randomizeBotRespondDelay: o
        } = window.mdpHelper, s = parseFloat(t), r = "on" === n ? +a : 0;
        if (o) {
            return Math.floor(Math.random() * s) + r * e
        }
        return s + r * e
    }

    function a(e) {
        if (void 0 === e) return;
        const t = document.querySelector(".mdp-helper-chatbot-footer-form");
        t && (e ? t.classList.remove("mdp-helper-form-disabled") : t.classList.add("mdp-helper-form-disabled"))
    }

    function o() {
        const {
            stt: e
        } = window.mdpHelper;
        if (!e) return;
        if (!e.enabled) return;
        const t = document.querySelector(".mdp-helper-bot-button-recognize");
        if (!t) return;
        const n = function() {
            let e = null;
            if ("SpeechRecognition" in window) e = new SpeechRecognition;
            else {
                if (!("webkitSpeechRecognition" in window)) {
                    const {
                        translations: t
                    } = window.mdpHelper;
                    console.warn(t.recognitionNotSupported);
                    return document.querySelector(".mdp-helper-form-with-recognize").classList.remove("mdp-helper-form-with-recognize"), e
                }
                e = new webkitSpeechRecognition
            }
            return e.lang = document.documentElement.lang, e.continuous = !1, e.interimResults = !1, e.maxAlternatives = 1, e
        }();
        n && (t.addEventListener("click", (() => {
            t.disabled ? n.stop() : (t.disabled = !0, "true" === t.getAttribute("data-in-progress") ? n.stop() : n.start())
        })), function(e, t) {
            e.addEventListener("start", (() => {
                const e = new CustomEvent("helper-recognition-start");
                window.dispatchEvent(e), t.setAttribute("data-in-progress", "true")
            })), e.addEventListener("end", (() => {
                const e = new CustomEvent("helper-recognition-end");
                window.dispatchEvent(e), t.setAttribute("data-in-progress", "false"), t.disabled = !1
            })), e.addEventListener("result", (e => {
                const {
                    resultIndex: t
                } = e, {
                    transcript: n
                } = e.results[t][0];
                document.querySelector("#mdp-helper-input-messages-field").value = n.charAt(0).toUpperCase() + n.slice(1);
                const a = new CustomEvent("helper-recognition", {
                    detail: {
                        message: n
                    }
                });
                window.dispatchEvent(a)
            })), e.addEventListener("error", (e => {
                const {
                    translations: n
                } = window.mdpHelper;
                console.warn(`${n.recognitionError}: ${e.error}`);
                const a = new CustomEvent("helper-recognition-error", {
                    detail: {
                        message: e.error
                    }
                });
                window.dispatchEvent(a), t.setAttribute("data-in-progress", "false"), t.disabled = !1
            }))
        }(n, t))
    }

    function s(e) {
        if (void 0 === e.detail.message || "" === e.detail.message) return;
        const t = document.querySelector(".mdp-helper-mute-button");
        if (t && "true" === t.getAttribute("data-mute")) return;
        const n = window.speechSynthesis;
        if (!n) return;
        const {
            tts: a
        } = window.mdpHelper, o = document.documentElement.lang;
        let s = new SpeechSynthesisUtterance;
        if (a.multilingual || "" === a.voice) {
            const e = n.getVoices().find((e => e.lang === o));
            e ? (s.voice = e, s.lang = document.documentElement.lang) : (s.voice = n.getVoices().find((e => e.lang.startsWith(o))), s.lang = s.voice.lang), s.voice || ("" === a.voice ? (s.voice = n.getVoices().find((e => e.lang.startsWith("en-GB"))), s.lang = s.voice.lang) : a.voice.split(",").forEach((e => {
                null === s.voice && (s.voice = n.getVoices().find((t => t.name === e.trim())), s.lang = s.voice.lang)
            })))
        } else a.voice.split(",").forEach((e => {
            if (e = e.split(";")[0], null === s.voice) {
                const t = n.getVoices().find((t => t.name === e.trim()));
                t && (s.voice = t, s.lang = s.voice.lang)
            }
        }));
        s.text = e.detail.message, n.speak(s)
    }

    function r() {
        const e = window.speechSynthesis;
        e && e.speaking && e.cancel()
    }

    function d() {
        const e = document.querySelector("#mdp-helper-input-messages-field"),
            t = document.querySelector(".mdp-helper-send-message-button");
        e && t && (i(t, !e.value.length > 0), e.addEventListener("input", (() => {
            i(t, !e.value.length > 0)
        })), window.addEventListener("helper-recognition-end", (() => {
            i(t, !e.value.length > 0)
        })))
    }

    function i(e, t) {
        e && (t ? e.setAttribute("disabled", "disabled") : e.removeAttribute("disabled"))
    }

    function p(e) {
        if (!e) return;
        const t = document.body;
        document.querySelector(".mdp-helper-hide-chat") ? t.classList.remove("mdp-helper-full-size-mobile-body") : t.classList.add("mdp-helper-full-size-mobile-body")
    }

    function l(e, t) {
        const n = (new Date).getTime();
        localStorage.setItem("mdpSetupQuestionTime", n + ""), sessionStorage.setItem("mdpUserQuestion", e), localStorage.setItem("mdpUserQuestion", e), sessionStorage.setItem("mdpBotAnswer", t), localStorage.setItem("mdpBotAnswer", t)
    }

    function c(e) {
        return /\S+@\S+\.\S+/.test(e)
    }
    const m = "on" === mdpHelper.botLogs;
    let u = sessionStorage.getItem("mdpHelperSessionId"),
        g = localStorage.getItem("mdpHelperSessionId"),
        h = localStorage.getItem("mdpHelperLogId"),
        w = localStorage.getItem("mdpHelperLog");
    async function f(e) {
        ! function(e) {
            u = e, g = e, sessionStorage.setItem("mdpHelperSessionId", e), localStorage.setItem("mdpHelperSessionId", e)
        }(e);
        const t = await
        function() {
            const e = new XMLHttpRequest,
                t = new FormData;
            return t.append("mdp_helper_nonce", mdpHelper.nonce), t.append("action", "mdp_helper_create_new_log"), new Promise(((n, a) => {
                e.open("POST", mdpHelper.endpoint, !0), e.onload = () => n(e.responseText), e.onerror = () => a(e.statusText), e.send(t)
            }))
        }();
        return JSON.parse(t).data
    }

    function b(e) {
        e && (w += e, localStorage.setItem("mdpHelperLog", w))
    }
    async function _(e, t) {
        m && (e ? b(`user: ${t};`) : (b(`bot: ${t};`), await
            function() {
                if (!h || g !== u) return;
                const e = new XMLHttpRequest,
                    t = new FormData;
                return t.append("mdp_helper_nonce", mdpHelper.nonce), t.append("action", "mdp_helper_update_log"), t.append("mdp_helper_log_id", h), t.append("mdp_helper_log_text", w), new Promise(((n, a) => {
                    e.open("POST", mdpHelper.endpoint, !0), e.onload = () => n(e.responseText), e.onerror = () => a(e.statusText), e.send(t)
                }))
            }()))
    }
    let S = sessionStorage.getItem("mdpHelperBotSessionId"),
        H = localStorage.getItem("mdpHelperBotSessionId");

    function v(e) {
        S = e, H = e, sessionStorage.setItem("mdpHelperBotSessionId", e), localStorage.setItem("mdpHelperBotSessionId", e)
    }
    async function y(e) {
        const t = new XMLHttpRequest,
            n = new FormData;
        return n.append("mdp_helper_nonce", mdpHelper.nonce), n.append("action", "mdp_helper_create_thread"), n.append("mdp_helper_session_id", e), new Promise(((e, a) => {
            t.open("POST", mdpHelper.endpoint, !0), t.onload = () => e(t.responseText), t.onerror = () => a(t.statusText), t.send(n)
        }))
    }
    async function L(e) {
        if (S || H) S !== H && (await async function(e) {
            if (!e) return;
            const t = new XMLHttpRequest,
                n = new FormData;
            return n.append("mdp_helper_nonce", mdpHelper.nonce), n.append("action", "mdp_helper_delete_thread"), n.append("mdp_helper_session_id", e), new Promise(((e, a) => {
                t.open("POST", mdpHelper.endpoint, !0), t.onload = () => e(t.responseText), t.onerror = () => a(t.statusText), t.send(n)
            }))
        }(H), v(e), await y(e));
        else {
            v(e);
            const t = await y(e);
            JSON.parse(t).data.created || (localStorage.removeItem("mdpHelperBotSessionId"), sessionStorage.removeItem("mdpHelperBotSessionId"))
        }
    }

    function E() {
        document.querySelector(".mdp-helper-welcome-popup-box").classList.add("mdp-helper-hide-chat")
    }
    const T = async function() {
        const i = document.querySelector(".mdp-helper-box"),
            b = document.querySelector(".mdp-helper-chatbot-messages-container"),
            S = document.querySelector(".mdp-helper-messages-wrapper"),
            H = "on" === mdpHelper.botTypingAnimation ? +mdpHelper.botTypingAnimationDelay : 0,
            v = parseFloat(mdpHelper.botRespondDelay),
            y = "" !== mdpHelper.sendMessageAudio ? new Audio(mdpHelper.sendMessageAudio) : "",
            T = "" !== mdpHelper.receiveMessageAudio ? new Audio(mdpHelper.receiveMessageAudio) : "",
            q = "on" === mdpHelper.enabledGoogleAnalytics,
            x = "on" === mdpHelper.limitUsersRequests,
            C = mdpHelper.enableMoreHelpMessage,
            k = mdpHelper.acceptanceCheckBox,
            I = mdpHelper.currentBotPersonalityType,
            M = mdpHelper.showMessagePreloader,
            A = mdpHelper.botRespondDelayEnabled,
            P = mdpHelper.fullSizeOnMobile,
            O = mdpHelper.faqCategoryIcon,
            B = mdpHelper.maxPopupHeight,
            D = mdpHelper.autoOpenPopup,
            R = mdpHelper.enabledWelcomePopup,
            N = mdpHelper.welcomePopupOpenDelay,
            $ = parseFloat(mdpHelper.autoOpenPopupDelay),
            J = document.querySelector(".mdp-helper-user-data-acceptance-wrapper"),
            F = document.querySelector(".mdp-helper-user-data-acceptance");
        let U, X = localStorage.getItem("mdpAcceptedCollectData"),
            Q = !1,
            z = !1;
        const {
            translations: G,
            botFeatures: W,
            tts: V,
            stt: j
        } = window.mdpHelper;
        let K = {},
            Y = {},
            Z = !1,
            ee = !1,
            te = !1,
            ne = 0,
            ae = 0,
            oe = 0,
            se = "",
            re = !0,
            de = !1,
            ie = !1;
        async function pe(e) {
            "" !== e && (e.pause(), e.currentTime = 0, await e.play())
        }

        function le() {
            const {
                botMemory: e
            } = window.mdpHelper;
            if (!e) return "";
            const t = sessionStorage.getItem("mdpUserQuestion") && sessionStorage.getItem("mdpUserQuestion").length > 0,
                n = localStorage.getItem("mdpUserQuestion") && localStorage.getItem("mdpUserQuestion").length > 0;
            if (!t && !n) return "";
            const a = t ? sessionStorage.getItem("mdpUserQuestion") : localStorage.getItem("mdpUserQuestion"),
                o = t ? sessionStorage.getItem("mdpBotAnswer") : localStorage.getItem("mdpBotAnswer"),
                s = JSON.parse(o);
            He(!0, a, !0), s && s.link_widget_data ? He(!1, o, !0, !0, s.link_widget_data) : He(!1, s.message, !0)
        }

        function ce() {
            const e = G.botCommands;
            He(!1, `<p>${e.title}</p><p>1. <button class="mdp-helper-command" title="${e.return}">/return</button> - ${e.return}</p><p>2. <button class="mdp-helper-command" title="${e.info}">/info</button> - ${e.info}</p>`), window.addEventListener("helper-message-rendered", (function(e) {
                e.detail.isBotCommands && e.detail.element.addEventListener("click", (async function(e) {
                    document.querySelector("#mdp-helper-input-messages-field").value = e.target.textContent, d()
                }))
            })), te = !0
        }

        function me() {
            setTimeout((() => {
                document.querySelectorAll(".mdp-bot-menu-button").forEach((e => {
                    e.addEventListener("click", (e => {
                        switch (e.target.dataset.buttonType) {
                            case "faq":
                                r(), ve(), Ce();
                                break;
                            case "collectData":
                                r(), ve(), async function() {
                                    const e = await fe();
                                    Y = JSON.parse(e).data, X = localStorage.getItem("mdpAcceptedCollectData"), "localstorage" === k && "confirmed" === X || "session" === k && z || "none" === k ? (Q = !1, Z = !0, He(!1, Object.values(Y)[0].message)) : (J.style.display = "flex", Q = !0, He(!1, mdpHelper.confirmationAcceptanceText))
                                }();
                                break;
                            case "sendEmail":
                                r(), ve(), async function() {
                                    ee = !0;
                                    const e = await we("", "get_emails_ask_user_email"),
                                        t = JSON.parse(e).data;
                                    t.link_widget_data ? await He(!1, t, !0, !0, t.link_widget_data) : await He(!1, t.message)
                                }();
                                break;
                            case "noMoreHelp":
                                !async function() {
                                    const e = await we("", "general_exit"),
                                        t = JSON.parse(e).data;
                                    t.link_widget_data ? await He(!1, t, !0, !0, t.link_widget_data) : await He(!1, t.message);
                                    const a = document.createElement("div");
                                    a.classList.add("mdp-bot-menu"), xe(a, !1), await He(!1, t), setTimeout((() => {
                                        ve(), b.appendChild(a)
                                    }), n(oe))
                                }();
                                break;
                            case "moreHelp":
                                !async function() {
                                    const e = await we("", "general_try_again"),
                                        t = JSON.parse(e).data;
                                    document.createElement("div").classList.add("mdp-bot-menu"), t.link_widget_data ? await He(!1, t, !0, !0, t.link_widget_data) : await He(!1, t.message);
                                    setTimeout((() => {
                                        ve()
                                    }), n(oe)), await ue(!1), me()
                                }()
                        }
                    }))
                }))
            }), n(oe))
        }
        async function ue(e = !0) {
            Z = !1, Q = !1, ee = !1, ne = 0, J && (J.style.display = "none");
            const a = await we("", "general", !0),
                o = JSON.parse(a).data;
            e && (o.link_widget_data ? await He(!1, o, !0, !0, o.link_widget_data) : await He(!1, o.message)), (W.includes("faq") || W.includes("collect_data") || W.includes("get_user_email")) && setTimeout((() => {
                b.appendChild(function() {
                    const e = document.createElement("div");
                    return e.classList.add("mdp-bot-menu"), mdpHelper.botFeatures.forEach((n => {
                        switch (n) {
                            case "faq":
                                e.appendChild(t("faq", mdpHelper.faqButtonName));
                                break;
                            case "collect_data":
                                e.appendChild(t("collectData", mdpHelper.collectDataButtonName));
                                break;
                            case "get_user_email":
                                e.appendChild(t("sendEmail", mdpHelper.sendEmailButton))
                        }
                    })), e
                }())
            }), n(oe))
        }
        async function ge(e) {
            r(), e.classList.toggle("mdp-helper-hide-chat"), 0 === ae && (le(), await ue(), me(), Be(), ae++),
                function() {
                    const e = document.querySelector(".mdp-helper-send-message-button");
                    e && (e.querySelector(".mdp-helper-send-message-button-caption") || (e.style.minWidth = e.offsetHeight + "px"))
                }()
        }

        function he(e) {
            M && !A && (e.onloadstart = () => {
                setTimeout((() => {
                    be()
                }), 0)
            }, e.onloadend = () => {
                ! function() {
                    const e = document.querySelector(".mdp-helper-message-preloader");
                    b.removeChild(e)
                }()
            })
        }

        function we(e, t, n = !1) {
            const a = new XMLHttpRequest,
                o = new FormData,
                s = new URL(mdpHelper.endpoint);
            return s.searchParams.set("action", "mdp_helper_get_dialog_message"), s.searchParams.set("mdp_helper_nonce", mdpHelper.nonce), s.searchParams.set("mdp_helper_messages_type", e), s.searchParams.set("mdp_helper_message_menu", t), n && (s.searchParams.set("mdp_helper_with_conditions", "included"), s.searchParams.set("mdp_post_id", mdpHelper.currentPost)), new Promise(((e, t) => {
                a.open("GET", s, !0), a.onload = () => e(a.responseText), he(a), a.onerror = () => t(a.statusText), a.send(o)
            }))
        }

        function fe() {
            const e = new XMLHttpRequest,
                t = new FormData,
                n = new URL(mdpHelper.endpoint);
            return n.searchParams.set("mdp_helper_nonce", mdpHelper.nonce), n.searchParams.set("action", "mdp_helper_get_collect_data_messages"), new Promise(((a, o) => {
                e.open("GET", n, !0), e.onload = () => a(e.responseText), he(e), e.onerror = () => o(e.statusText), e.send(t)
            }))
        }

        function be() {
            const t = document.createElement("div");
            t.classList.add("mdp-helper-bot-message-container", "mdp-helper-message-container", "mdp-helper-message-preloader");
            const n = e(!1),
                a = document.createElement("div");
            a.classList.add("mdp-helper-bot-message", "mdp-helper-message", "mdp-helper-message-preloader"), a.innerHTML = "<span></span><span></span><span></span>", n && t.appendChild(n), t.appendChild(a), b.appendChild(t)
        }

        function _e(e) {
            const t = document.createElement("div");
            t.innerHTML = e;
            const n = t.querySelector("video"),
                a = t.querySelector("iframe"),
                o = t.querySelector("audio");
            return !!(n || a || o)
        }

        function Se(e, t, n, a, o, s, d = !1, i = {}) {
            "on" !== mdpHelper.botTypingAnimation || "bot" !== o || s || "bot" !== o || _e(a) ? "visitor" === o ? t.innerText = a : t.innerHTML = a : (ie = !1, function(e, t) {
                    let n, a, o = 0;
                    ! function s() {
                        if (o >= e.length) return;
                        if (ie) return;
                        if (a = e.slice(0, ++o), a > e) return;
                        t.innerHTML = a;
                        let r = a.slice(-1);
                        if ("<" === r && (n = !0), ">" === r && (n = !1), n) return s();
                        setTimeout(s, H)
                    }()
                }(a, t)),
                function(e, t, n) {
                    const {
                        messageSignature: a
                    } = window.mdpHelper;
                    if (!a) return;
                    if (!(a.nameEnabled || a.timestampEnabled || a.buttonsEnabled || a.copyBotTextButtonEnabled)) return;
                    const o = e ? "bot" : "visitor",
                        s = document.createElement("div");
                    if (s.classList.add("mdp-helper-message-signature"), s.classList.add(`mdp-helper-${o}-signature`), a.nameEnabled) {
                        const t = document.createElement("span");
                        t.classList.add("mdp-helper-message-name"), t.innerHTML = e ? a.botName : a.userName, s.appendChild(t)
                    }
                    if (a.timestampEnabled) {
                        const e = document.createElement("span");
                        e.classList.add("mdp-helper-message-timestamp"), e.innerHTML = (new Date).toLocaleTimeString(document.documentElement.lang, {
                            hour12: a.timestampFormat12,
                            hour: "numeric",
                            minute: "numeric"
                        }), s.appendChild(e)
                    }
                    if (e) {
                        const e = document.createElement("button");
                        e.classList.add("mdp-helper-main-menu-button"), e.addEventListener("click", (async () => {
                            await n(), r()
                        })), window.mdpHelper.messageSignature.buttonsEnabled && (e.title = mdpHelper.translations.botCommands.return, e.innerHTML = `${mdpHelper.returnButtonIcon}<span class="mdp-helper-main-menu-button-caption">${mdpHelper.translations.botCommands.return}</span>`, s.appendChild(e))
                    }
                    if (e) {
                        const e = document.createElement("button");
                        e.classList.add("mdp-helper-main-menu-button"), e.addEventListener("click", (e => {
                            const t = e.target.closest(".mdp-helper-message-signature"),
                                n = e.target.classList.contains("mdp-helper-main-menu-button-caption") ? e.target : e.target.querySelector(".mdp-helper-main-menu-button-caption"),
                                a = t.nextSibling.querySelector(".mdp-helper-bot-message").innerText;
                            navigator.clipboard.writeText(a), n.innerText = mdpHelper.translations.botCommands.successfullyCopied, setTimeout((() => {
                                n.innerText = mdpHelper.translations.botCommands.copy
                            }), 3e3)
                        })), window.mdpHelper.messageSignature.copyBotTextButtonEnabled && (e.title = mdpHelper.translations.botCommands.copy, e.innerHTML = `${mdpHelper.copyBotTextButtonIcon}<span class="mdp-helper-main-menu-button-caption">${mdpHelper.translations.botCommands.copy}</span>`, s.appendChild(e))
                    }
                    t.appendChild(s)
                }("visitor" !== o, b, Ae), n && e.appendChild(n), d ? e.appendChild(function(e, t) {
                    const {
                        translations: n
                    } = window.mdpHelper, a = document.createElement("div");
                    if (a.classList.add("mdp-helper-link-widget-container"), a.classList.add("mdp-helper-bot-message"), a.classList.add("mdp-helper-message"), e.thumbnail) {
                        const t = document.createElement("div");
                        t.classList.add("mdp-helper-link-widget-post-thumbnail"), t.innerHTML += JSON.parse(e.thumbnail), a.appendChild(t)
                    }
                    const o = document.createElement("div");
                    o.classList.add("mdp-helper-link-widget-content");
                    const s = document.createElement("h6");
                    s.classList.add("mdp-helper-link-widget-post-title"), s.innerText = e.post_title;
                    const r = document.createElement("p");
                    r.classList.add("mdp-helper-link-widget-post-excerpt"), r.innerText = e.post_excerpt;
                    const d = document.createElement("a");
                    return d.classList.add("mdp-helper-link-widget-read-more"), d.setAttribute("href", t), d.target = "_blank", d.innerText = n.readMoreText, o.appendChild(s), o.appendChild(r), o.appendChild(d), a.appendChild(o), a
                }(i, a)) : e.appendChild(t), b.appendChild(e)
        }
        async function He(t, n, o = !1, s = !1, r = {}) {
            const d = t ? "visitor" : "bot",
                i = "on" === mdpHelper.botMessagePreloader,
                p = document.createElement("div");
            p.classList.add(`mdp-helper-${d}-message-container`, "mdp-helper-message-container");
            const l = e(t),
                c = document.createElement("div");
            c.classList.add(`mdp-helper-${d}-message`, "mdp-helper-message"), n && (s || (oe = n.length), (!o || !t) && i && v > 0 && setTimeout((() => {
                be()
            }), 0), setTimeout((async () => {
                const e = document.querySelector(".mdp-helper-message-preloader");
                if (Se(p, c, l, n, d, o, s, r), (!o || !t) && i && v > 0 && b.removeChild(e), t ? await pe(y) : await pe(T), V.enabled && !t) {
                    const e = /<video[^>]*\sclass="wp-video-shortcode"[^>]*>[\s\S]*?<\/video>/g,
                        t = s ? `${G.learnMoreText} ${r.post_title}` : n.replace(e, (e => e.replace(/<a[^>]*>.*?<\/a>/g, ""))).replace(/<\/?[^>]+(>|$)/g, ""),
                        a = new CustomEvent("helper-speak", {
                            detail: {
                                message: t
                            }
                        });
                    window.dispatchEvent(a)
                }
                t || W.includes("ai") || a(ee || Z || Q || te);
                const S = new CustomEvent("helper-message-rendered", {
                    detail: {
                        element: p,
                        message: n,
                        isBot: !t,
                        isBotCommands: te,
                        isDataCollecting: Z,
                        notConfirmedAcceptanceMenu: Q,
                        isSendingEmail: ee
                    }
                });
                window.dispatchEvent(S), await _(t, n), t && !de && (await async function(e) {
                    m && (m && (w || localStorage.setItem("mdpHelperLog", "")), g || u ? g !== u && (h = await f(e), localStorage.setItem("mdpHelperLogId", h)) : (h = await f(e), localStorage.setItem("mdpHelperLogId", h)))
                }(Pe(10)), de = !0)
            }), t || o ? 0 : v))
        }

        function ve() {
            const e = document.querySelectorAll(".mdp-bot-menu");
            e.length && (b.removeChild(e[e.length - 1]), r())
        }
        async function ye(e = !1, t = 1) {
            se = "";
            const n = await
            function(e) {
                const t = new XMLHttpRequest,
                    n = new FormData,
                    a = new URL(mdpHelper.endpoint);
                return a.searchParams.set("action", "mdp_helper_get_faq_questions"), a.searchParams.set("page", e), a.searchParams.set("mdp_helper_nonce", mdpHelper.nonce), new Promise(((e, o) => {
                    t.open("GET", a, !0), t.onload = () => e(t.responseText), t.onerror = () => o(t.statusText), t.send(n)
                }))
            }(t), a = JSON.parse(n);
            Te(a.data.questions_data.questions, a.data.categories, e, !1, +a.data.questions_data.pages_count, t), await qe(e)
        }

        function Le(e, t, n, a, o) {
            const s = document.createElement("button"),
                r = mdpHelper.translations.pagination;
            s.classList.add("mdp-faq-pagination-button", `mdp-faq-pagination-${t}-nav-button`), s.innerText = "next" === t ? r.next : r.prev, s.addEventListener("click", (async () => {
                (n < a && "next" === t || n > 1 && "prev" === t) && (ve(), "next" === t ? o ? await Ee(se, n + 1) : await ye(!0, n + 1) : o ? await Ee(se, n - 1) : await ye(!0, n - 1))
            })), e.appendChild(s)
        }
        async function Ee(e, t = 1) {
            const n = await
            function(e, t) {
                const n = new XMLHttpRequest,
                    a = new FormData,
                    o = new URL(mdpHelper.endpoint);
                return o.searchParams.set("action", "mdp_helper_get_faq_questions_by_cat"), o.searchParams.set("mdp_helper_nonce", mdpHelper.nonce), o.searchParams.set("category", e), o.searchParams.set("page", t), new Promise(((e, t) => {
                    n.open("GET", o, !0), n.onload = () => e(n.responseText), n.onerror = () => t(n.statusText), n.send(a)
                }))
            }(e, t), a = JSON.parse(n);
            Te(a.data.questions, [], !0, !0, +a.data.pages_count, t), await qe(!0)
        }

        function Te(e, t = [], a = !1, o = !1, s = 0, r = 1) {
            setTimeout((() => {
                const n = document.createElement("div");
                n.classList.add("mdp-bot-menu"),
                    function(e, t) {
                        e.forEach((e => {
                            const n = document.createElement("div");
                            n.innerHTML = `\n                    <span>${e}</span>\n                    ${O?`<div class="mdp-bot-menu-icon">${O}</div>`:""}\n            `, n.classList.add("mdp-bot-menu-button", "mdp-category-button"), n.setAttribute("data-category", e), t.appendChild(n)
                        }))
                    }(t, n), e.forEach((e => {
                        const t = document.createElement("button");
                        t.innerHTML = e.question, t.classList.add("mdp-bot-menu-button", "mdp-question-button"), t.setAttribute("data-response-index", e.index), n.appendChild(t)
                    })), b.appendChild(n), "on" === mdpHelper.pagination && s > 1 && function(e, t, n, a = 1) {
                        const o = document.createElement("div");
                        o.classList.add("mdp-bot-menu-button", "mdp-faq-pagination"), Le(o, "prev", a, t, n);
                        const s = document.createElement("div");
                        s.classList.add("mdp-faq-pagination-pages-container");
                        for (let e = 1; e <= t; e++) {
                            const t = document.createElement("button");
                            t.classList.add("mdp-faq-pagination-button"), t.innerText = e, e === a && t.classList.add("mdp-faq-pagination-active"), t.addEventListener("click", (async () => {
                                ve(), n ? await Ee(se, e) : await ye(!0, e)
                            })), s.appendChild(t)
                        }
                        o.appendChild(s), Le(o, "next", a, t, n), e.appendChild(o)
                    }(n, s, o, r), o && function(e) {
                        const t = document.createElement("div");
                        t.classList.add("mdp-bot-menu-button", "mdp-bot-return-to-faq-questions"), t.innerText = mdpHelper.translations.returnFaqButton, t.addEventListener("click", (async () => {
                            ve(), e.removeChild(t), await ye(!0)
                        })), e.appendChild(t)
                    }(n), xe(n)
            }), n(oe) * (a ? 0 : 1))
        }
        async function qe(e = !1) {
            setTimeout((() => {
                const e = document.querySelectorAll(".mdp-question-button"),
                    t = document.querySelectorAll(".mdp-category-button");
                e.forEach((e => {
                    e.addEventListener("click", (async e => {
                        ve(), He(!0, e.target.innerText.trim());
                        const t = await
                        function(e) {
                            const t = new XMLHttpRequest,
                                n = new FormData,
                                a = new URL(mdpHelper.endpoint);
                            return a.searchParams.set("action", "mdp_helper_get_faq_response"), a.searchParams.set("mdp_helper_nonce", mdpHelper.nonce), a.searchParams.set("mdp_helper_question_index", e), new Promise(((e, o) => {
                                t.open("GET", a, !0), t.onload = () => e(t.responseText), he(t), t.onerror = () => o(t.statusText), t.send(n)
                            }))
                        }(e.target.dataset.responseIndex), a = JSON.parse(t);
                        if (a.data.link_widget_data) {
                            He(!1, a.data.message, !1, !0, a.data.link_widget_data);
                            const e = JSON.stringify({
                                message: a.data.message,
                                link_widget_data: a.data.link_widget_data
                            });
                            l(a.data.question, e)
                        } else {
                            He(!1, a.data.message);
                            const e = JSON.stringify({
                                message: a.data.message
                            });
                            l(a.data.question, e)
                        }
                        _e(a.data.message) && (oe = 0), U = setTimeout((async () => {
                            C ? await ke() : await Ce()
                        }), n(oe) + 1e3)
                    }))
                })), t.forEach((e => {
                    e.addEventListener("click", (async e => {
                        ve(), se = e.target.dataset.category || e.target.closest(".mdp-category-button").dataset.category, await Ee(se)
                    }))
                }))
            }), (n(oe) + 500) * (e ? 0 : 1))
        }

        function xe(e, n = !0) {
            const a = t("backToMenu", mdpHelper.translations.backToStartMenuButton);
            e.appendChild(a), a.addEventListener("click", (async () => {
                ve(), K = {}, await ue(n), me()
            }))
        }
        async function Ce() {
            const e = await we("", "faq"),
                t = JSON.parse(e).data;
            t.link_widget_data ? await He(!1, t, !0, !0, t.link_widget_data) : await He(!1, t.message), await ye()
        }
        async function ke() {
            const e = document.createElement("div"),
                a = await we("", "general_more_help_initial"),
                o = JSON.parse(a).data;
            o.link_widget_data ? await He(!1, o, !0, !0, o.link_widget_data) : await He(!1, o.message), e.classList.add("mdp-bot-menu"), setTimeout((() => {
                ve(), e.appendChild(t("moreHelp", mdpHelper.moreHelpConfirmButtonText)), e.appendChild(t("noMoreHelp", mdpHelper.moreHelpDeclineButtonText)), b.appendChild(e)
            }), n(oe)), me()
        }
        async function Ie(e) {
            const t = await
            function(e) {
                const t = new XMLHttpRequest,
                    n = new FormData;
                return n.append("mdp_helper_nonce", mdpHelper.nonce), n.append("action", "mdp_helper_bot_response"), n.append("visitor_message", e), n.append("mdp_helper_hash", localStorage.getItem("mdpHelperHash")), n.append("mdp_helper_session_id", localStorage.getItem("mdpHelperBotSessionId")), new Promise(((e, a) => {
                    t.open("POST", mdpHelper.endpoint, !0), t.onload = () => e(t.responseText), he(t), t.onerror = () => a(t.statusText), t.send(n)
                }))
            }(e), a = JSON.parse(t).data;
            a.link_widget_data ? (He(!1, a.message, !1, !0, a.link_widget_data), l(e, JSON.stringify({
                message: a.message,
                link_widget_data: a.link_widget_data
            })), C && setTimeout((async () => {
                await ke()
            }), n(oe))) : (He(!1, a.message), l(e, JSON.stringify({
                message: a.message
            })), C && setTimeout((async () => {
                await ke()
            }), n(oe)));
            const o = new CustomEvent("helper-ai-bot-request");
            window.dispatchEvent(o)
        }

        function Me(e, t) {
            switch (t.validation) {
                case "email":
                    c(e) ? (re = !0, ne++) : (re = !1, He(!1, t.validation_error));
                    break;
                case "number":
                    ! function(e, t, n) {
                        const a = /^[0-9]+$/;
                        return a.test(t) && a.test(e) ? +e <= +t : a.test(n) && a.test(e) ? +e >= +n : a.test(e)
                    }(e, t.max_number, t.min_number) ? (re = !1, He(!1, t.validation_error)) : (re = !0, ne++);
                    break;
                case "custom":
                    n = e, a = t.validation_custom_regex, new RegExp(a).test(n) ? (re = !0, ne++) : (re = !1, He(!1, t.validation_error))
            }
            var n, a
        }
        async function Ae() {
            clearTimeout(U), ee = !1, Z = !1, Q = !1, ie = !0, ne = 0, ve(), K = {}, await ue(), me()
        }

        function Pe(e) {
            let t = "";
            const n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            let a = 0;
            for (; a < e;) t += n.charAt(Math.floor(62 * Math.random())), a += 1;
            return t
        }
        async function Oe() {
            const e = document.querySelector("input.mdp-helper-input-messages-field");
            await pe(y);
            const t = e.value;
            if (e.value = "", "" === t) return;
            if ("/return" === t) return te = !1, await ue(), void me();
            "/info" === t && (te = !1, r(), ce()), He(!0, t);
            const {
                botFeatures: a
            } = window.mdpHelper;
            if (ee || Z || Q || !a.includes("ai") || (x && !localStorage.getItem("mdpHelperHash") && localStorage.setItem("mdpHelperHash", Pe(20)), "assistant" === I && await L(Pe(10)), await Ie(t)), Z) {
                const e = Object.values(Y),
                    a = Object.keys(Y);
                if (K[a[ne]] = t, "none" === e[ne].validation ? ne++ : Me(t, e[ne]), ne > a.length - 1) {
                    const e = await
                    function(e) {
                        const t = new XMLHttpRequest,
                            n = new FormData;
                        return n.append("mdp_helper_nonce", mdpHelper.nonce), n.append("action", "mdp_helper_collect_user_data"), n.append("mdp_collected_data", JSON.stringify(e)), new Promise(((e, a) => {
                            t.open("POST", mdpHelper.endpoint, !0), t.onload = () => e(t.responseText), he(t), t.onerror = () => a(t.statusText), t.send(n)
                        }))
                    }(K);
                    q && "undefined" != typeof gtag && gtag("event", "generate_lead", {
                        event_label: "Helper collect data"
                    }), He(!1, JSON.parse(e).data), re = !0, ne = 0, Y = {}, Z = !1, K = {}, setTimeout((async () => {
                        C ? await ke() : (await ue(), await me())
                    }), n(oe) + 1e3)
                } else re && He(!1, e[ne].message)
            }
            if (Q && He(!1, mdpHelper.confirmationAcceptanceText), ee) {
                if (0 === ne)
                    if (c(t)) {
                        K.email = t, ne++;
                        const e = await we("", "get_emails_ask_user_message"),
                            n = JSON.parse(e).data;
                        n.link_widget_data ? await He(!1, n, !0, !0, n.link_widget_data) : await He(!1, n.message)
                    } else He(!1, mdpHelper.translations.incorrectEmailMessage);
                if (ne > 0 && (K.message = t, ne++), ne > 2) {
                    const e = await
                    function(e) {
                        const t = new XMLHttpRequest,
                            n = new FormData;
                        return n.append("mdp_helper_nonce", mdpHelper.nonce), n.append("action", "mdp_helper_send_user_email"), n.append("mdp_user_email", JSON.stringify(e)), new Promise(((e, a) => {
                            t.open("POST", mdpHelper.endpoint, !0), t.onload = () => e(t.responseText), he(t), t.onerror = () => a(t.statusText), t.send(n)
                        }))
                    }(K);
                    He(!1, JSON.parse(e).data), K = {}, ee = !1, ne = 0, setTimeout((async () => {
                        C ? await ke() : (await ue(), await me())
                    }), n(oe) + 1e3)
                }
            }
        }

        function Be() {
            const {
                stt: e
            } = window.mdpHelper;
            document.querySelector(".mdp-helper-send-form").addEventListener("submit", (e => {
                e.preventDefault(), Oe().then()
            })), e.enabled && e.autoSubmit && window.addEventListener("helper-recognition", Oe)
        }
        i && (V.enabled && (window.addEventListener("helper-speak", s, !1), window.speechSynthesis.onvoiceschanged = () => {
            window.addEventListener("helper-speak", s, !1)
        }, function() {
            const e = "data-mute",
                t = document.querySelector(".mdp-helper-mute-button");
            if (!t) return;
            const {
                translations: n
            } = window.mdpHelper, a = document.createElement("b");
            t.getAttribute(e) || (t.setAttribute(e, "false"), a.innerHTML = n.on, t.appendChild(a)), t.addEventListener("click", (() => {
                JSON.parse(t.getAttribute(e)) ? (t.setAttribute(e, "false"), a.innerHTML = n.on) : (t.setAttribute(e, "true"), a.innerHTML = n.off, r())
            }))
        }()), j.enabled && o(), m && g !== u && (w = "", localStorage.setItem("mdpHelperLog", w), h = "", localStorage.setItem("mdpHelperLogId", h)), i.style.display = "block", function(e) {
            const t = (new Date).getTime(),
                n = localStorage.getItem("mdpSetupQuestionTime");
            n && t - n > 60 * e * 60 * 1e3 && (localStorage.removeItem("mdpUserQuestion"), localStorage.removeItem("mdpBotAnswer"))
        }(+mdpHelper.localStorageHours), function() {
            const e = document.querySelector(".mdp-helper-messages-wrapper");
            if (!e) return;
            const t = document.querySelector(".mdp-helper-chatbot-messages-container");
            t && e.addEventListener("scroll", (() => {
                e.classList.contains("mdp-helper-wrapper-scrolled") || e.classList.add("mdp-helper-wrapper-scrolled");
                const n = document.querySelector(".mdp-helper-chatbot-messages");
                n && (e.getBoundingClientRect().top > t.getBoundingClientRect().top ? n.classList.add("mdp-helper-wrapper-gradient-top") : n.classList.remove("mdp-helper-wrapper-gradient-top"), e.getBoundingClientRect().bottom + 1 < t.getBoundingClientRect().bottom ? n.classList.add("mdp-helper-wrapper-gradient-bottom") : n.classList.remove("mdp-helper-wrapper-gradient-bottom"))
            }))
        }(), d(), new ResizeObserver((function() {
            S.scrollTop = S.scrollHeight
        })).observe(b), await async function() {
            const e = await fe();
            Y = JSON.parse(e).data, F && F.addEventListener("change", (() => {
                X = localStorage.getItem("mdpAcceptedCollectData"), F.checked && (J.style.display = "none", "localstorage" !== k || X ? "session" === k && (z = !0) : (localStorage.setItem("mdpAcceptedCollectData", "confirmed"), X = localStorage.getItem("mdpAcceptedCollectData")), Z = !0, Q = !1, He(!1, Object.values(Y)[0].message), F.checked = !1)
            }))
        }(), R && function(e = 0) {
            const t = document.querySelector(".mdp-helper-box"),
                n = document.querySelector(".mdp-helper-chatbot-box"),
                a = document.querySelector(".mdp-helper-welcome-popup-box"),
                o = document.querySelector(".mdp-helper-welcome-popup-close-button");
            e ? setTimeout((() => {
                n.classList.contains("mdp-helper-hide-chat") && (t.classList.add("mdp-helper-welcome-popup-enabled"), a.classList.remove("mdp-helper-hide-chat"))
            }), 1e3 * e) : (t.classList.add("mdp-helper-welcome-popup-enabled"), a.classList.remove("mdp-helper-hide-chat")), o && o.addEventListener("click", (() => {
                E()
            }))
        }(+N), async function() {
            const e = document.querySelector(".mdp-helper-chatbot-box");
            if (function() {
                    const e = document.querySelector(".mdp-helper-bot-commands");
                    e && e.addEventListener("click", (() => {
                        r(), ce()
                    }))
                }(), "on" !== mdpHelper.openChatWithButton && "on" === mdpHelper.openPopupWithoutButton) le(), await ue(), me(), Be(), ae++;
            else {
                const t = document.querySelector("#mdp-helper-open-button"),
                    n = document.querySelector(".mdp-helper-chatbot-close-button");
                n && n.addEventListener("click", (() => {
                    r(), e.classList.add("mdp-helper-hide-chat"), p(P)
                })), document.addEventListener("click", (t => {
                    t.target.closest(".mdp-helper-chatbot-box, .mdp-bot-menu, .mdp-bot-menu-button") || t.target.closest("#mdp-helper-open-button") || (r(), e.classList.add("mdp-helper-hide-chat"), p(P))
                })), t && t.addEventListener("click", (async () => {
                    R && (i.classList.remove("mdp-helper-welcome-popup-enabled"), E()), await ge(e), p(P)
                })), window.addEventListener("click", (async t => {
                    t.target.classList.contains("mdp-helper-trigger") && (t.preventDefault(), await ge(e), p(P))
                })), D && setTimeout((async () => {
                    await ge(e)
                }), 1e3 * $)
            }
            a(W.includes("ai"))
        }(), p(P), function(e) {
            if (!e) return;
            const t = document.querySelector(".mdp-helper-open-button-wrapper"),
                n = document.querySelector(".mdp-helper-chatbot-box"),
                a = window.getComputedStyle(n),
                o = a.marginTop,
                s = a.marginBottom,
                r = t ? `${t.clientHeight}px` : "0px";
            n.style.maxHeight = `calc(100vh - (${o} + ${s} + ${r}))`
        }(B))
    };
    "loading" === document.readyState ? document.addEventListener("DOMContentLoaded", T) : T()
})();